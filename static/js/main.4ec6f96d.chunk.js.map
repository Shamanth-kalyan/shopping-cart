{"version":3,"sources":["components/item-info.js","components/item-image.js","components/item-counter.js","hook/async-state.js","components/cart-details.js","components/order.js","components/checkout.js","services/cart-service.js","components/shoping-cart.js","App.js","serviceWorker.js","index.js"],"names":["ItemInfo","brand_name","product_name","quantity","mrp","price","className","ItemImage","imageUrl","src","alt","ItemCounter","increment","decrement","itemDetail","initialState","brandName","parseInt","replace","itemCount","initialValue","useState","value","setValue","x","Promise","resolve","useAsyncState","cartDetail","setCartDetail","countIncrement","then","useEffect","onClick","type","disabled","CartDetails","props","image_url","offer_text","rest","portal","document","getElementById","Order","element","createElement","body","style","overflow","appendChild","this","removeChild","createPortal","toggleOrderModal","cartItems","map","items","index","key","total","React","Component","Checkout","resetCartItems","modelOpen","setModelOpen","cartService","getCartItems","fetch","res","json","ShoppingCart","state","shoppingItems","cartData","data","setState","item","filter","i","push","prevState","setItemQuantity","addCartItems","itemdetail","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ec6f96d.chunk.js","sourcesContent":["import React from 'react';\n\nexport function ItemInfo({ brand_name, product_name, quantity, mrp, price }) {\n  return (\n    <div className=\"item-info\">\n      <span className=\"item-name\">{brand_name}</span>\n      <span>{product_name}</span>\n      <span>{quantity}</span>\n      <span>{mrp}</span>\n      <span className=\"item-price\">{price}</span>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function ItemImage({ imageUrl }) {\n  return <img className=\"item-image\" src={imageUrl} alt=\"food_image\"></img>;\n}\n","import React, { useEffect } from 'react';\n\n// custom hook\nimport { useAsyncState } from '../hook/async-state';\n\nexport function ItemCounter({ increment, decrement, itemDetail }) {\n  const initialState = {\n    brandName: itemDetail.brandName,\n    price: getPrice(itemDetail.price),\n    itemCount: itemDetail.itemCount,\n  };\n  const [cartDetail, setCartDetail] = useAsyncState(initialState);\n\n  useEffect(() => {\n    setCartDetail(initialState);\n  }, [itemDetail]);\n\n  function getPrice(price) {\n    return parseInt(price.replace(/[^0-9.]/g, ''), 10);\n  }\n\n  function countIncrement() {\n    if (cartDetail.itemCount <= itemDetail.quantity - 1) {\n      setCartDetail({\n        ...cartDetail,\n        itemCount: cartDetail.itemCount + 1,\n      }).then((cartDetail) => increment(cartDetail));\n    }\n  }\n\n  function countDecrement() {\n    if (cartDetail.itemCount >= 1) {\n      setCartDetail({\n        ...cartDetail,\n        itemCount: cartDetail.itemCount - 1,\n      }).then((cartDetail) => decrement(cartDetail));\n    }\n  }\n\n  return (\n    <div className=\"item-counter\">\n      <button onClick={countIncrement}>Add to cart</button>\n      <div className=\"counter\">\n        <span onClick={countDecrement}>-</span>\n        <input type=\"number\" value={cartDetail.itemCount} disabled></input>\n        <span onClick={countIncrement}>+</span>\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nexport function useAsyncState(initialValue) {\n  const [value, setValue] = useState(initialValue);\n  const setter = (x) =>\n    new Promise((resolve) => {\n      setValue(x);\n      resolve(x);\n    });\n  return [value, setter];\n}\n","import React from 'react';\n\n// custom component\nimport { ItemInfo } from './item-info';\nimport { ItemImage } from './item-image';\nimport { ItemCounter } from './item-counter';\n\nexport function CartDetails(props) {\n  const { image_url, offer_text, increment, decrement, ...rest } = props;\n  const itemDetail = {\n    price: rest.price,\n    quantity: rest.quantity,\n    brandName: rest.brand_name,\n    itemCount: rest.itemCount,\n  };\n\n  return (\n    <div className=\"cart-item\">\n      <div className=\"item-img-offer\">\n        <ItemImage imageUrl={image_url} />\n        <span>{offer_text}</span>\n      </div>\n      <div className=\"item-detail\">\n        <ItemInfo {...rest} />\n        <ItemCounter\n          increment={increment}\n          decrement={decrement}\n          itemDetail={itemDetail}\n        ></ItemCounter>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { createPortal } from 'react-dom';\n\nconst portal = document.getElementById('portal');\n\nexport class Order extends React.Component {\n  constructor(props) {\n    super(props);\n    this.element = document.createElement('div');\n  }\n\n  componentDidMount() {\n    document.body.style.overflow = 'hidden';\n    portal.appendChild(this.element);\n  }\n\n  componentWillUnmount() {\n    portal.removeChild(this.element);\n    document.body.style.overflow = 'unset';\n  }\n\n  render() {\n    return createPortal(\n      <div className=\"order-detail\">\n        <div className=\"modal\">\n          <span className=\"close-icon\" onClick={this.props.toggleOrderModal}>\n            X\n          </span>\n          <h1>Order received successfully.</h1>\n          <table>\n            <thead>\n              <tr>\n                <th>Brand Name</th>\n                <th>Price</th>\n                <th>Item Count</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.cartItems.map((items, index) => (\n                <tr key={index}>\n                  <td>{items.brandName}</td>\n                  <td>{items.price}</td>\n                  <td>{items.itemCount}</td>\n                  <td>{items.price * items.itemCount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"total-amount\">Grand Total: {this.props.total}</div>\n        </div>\n      </div>,\n      this.element\n    );\n  }\n}\n","import React, { useState } from 'react';\n\n// custom component\nimport { Order } from '../components/order';\n\nexport function Checkout({ quantity, total, cartItems, resetCartItems }) {\n  const [modelOpen, setModelOpen] = useState(false);\n\n  function toggleOrderModal() {\n    if (modelOpen) {\n      resetCartItems();\n    }\n    setModelOpen(!modelOpen);\n  }\n\n  return (\n    <div className=\"checkout-detail\">\n      <div>\n        <span>Qty: {quantity}</span>\n        <span>Total: {total}</span>\n      </div>\n      <button onClick={toggleOrderModal}>Checkout</button>\n      {modelOpen && (\n        <Order\n          total={total}\n          cartItems={cartItems}\n          toggleOrderModal={() => toggleOrderModal()}\n        />\n      )}\n    </div>\n  );\n}\n","class CartService {\n  getCartItems = () => {\n    return fetch('/shopping-cart/cart-items.json').then((res) => res.json());\n  };\n}\n\nexport const cartService = new CartService();\n","import React from 'react';\n\n// custom component\nimport { CartDetails } from './cart-details';\nimport { Checkout } from './checkout';\n\n// custom services\nimport { cartService } from '../services/cart-service';\n\n// custom styles\nimport '../asset/style/style.css';\nimport '../asset/style/respnsive.css';\n\nexport class ShoppingCart extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      shoppingItems: [],\n      cartItems: [],\n      quantity: 0,\n      total: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.getCartItems();\n  }\n\n  getCartItems() {\n    cartService.getCartItems().then((res) => {\n      const cartData = res.data.map((data) => {\n        return {\n          ...data,\n          itemCount: 0,\n          total: 0,\n        };\n      });\n      this.setState({\n        shoppingItems: cartData,\n      });\n    });\n  }\n\n  addCartItems(item) {\n    const cartItems = this.state.cartItems.filter(\n      (i) => i.brandName !== item.brandName\n    );\n    cartItems.push(item);\n    return cartItems;\n  }\n\n  setItemQuantity(item) {\n    return this.state.shoppingItems.map((data) => {\n      if (data.brand_name === item.brandName) {\n        data.itemCount = item.itemCount;\n      }\n      return data;\n    });\n  }\n\n  increment(itemDetail) {\n    this.setState((prevState) => ({\n      shoppingItems: this.setItemQuantity(itemDetail),\n      quantity: prevState.quantity + 1,\n      total: prevState.total + itemDetail.price,\n      cartItems: this.addCartItems(itemDetail),\n    }));\n  }\n\n  decrement(itemDetail) {\n    this.setState((prevState) => ({\n      shoppingItems: this.setItemQuantity(itemDetail),\n      quantity: prevState.quantity - 1,\n      total: prevState.total - itemDetail.price,\n      cartItems: this.addCartItems(itemDetail),\n    }));\n  }\n\n  resetCartItems() {\n    this.setState({\n      ...this.state,\n      cartItems: [],\n      quantity: 0,\n      total: 0,\n    });\n    this.getCartItems();\n  }\n\n  render() {\n    return (\n      <div className=\"shopping-cart\">\n        {this.state.shoppingItems.map((items, index) => {\n          return (\n            <CartDetails\n              increment={(itemdetail) => this.increment(itemdetail)}\n              decrement={(itemdetail) => this.decrement(itemdetail)}\n              key={index}\n              {...items}\n            ></CartDetails>\n          );\n        })}\n        <Checkout\n          quantity={this.state.quantity}\n          total={this.state.total}\n          cartItems={this.state.cartItems}\n          resetCartItems={() => this.resetCartItems()}\n        ></Checkout>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { ShoppingCart } from './components/shoping-cart';\n\nfunction App() {\n  return <ShoppingCart></ShoppingCart>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}